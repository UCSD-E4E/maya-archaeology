
<launch>
   
  <!-- Multi-cameras demo with 2 Kinects -->
		
	<arg name="record" default="true" />
  <arg name="record_prefix" default="two_kinectv1" />

	<arg name="playback" default="false" />
	<arg name="playback_file" default="" />
  <arg name="change_tf" default="true" />
	<param name="use_sim_time" value="$(arg playback)" />

	<!-- <param name="use_sim_time" value="true" if="$(arg playback)" /> -->
   
  <!-- Cameras -->
  <include unless="$(arg playback)" file="$(find freenect_launch)/launch/freenect.launch">
    <arg name="depth_registration" value="true" />
    <arg name="camera" value="camera1" />
    <arg name="device_id" value="B00363716224036B" />
		<arg name="rgb_processing" value="true" /> 
    <arg name="ir_processing" value="false" /> 
    <arg name="depth_processing" value="false" /> 
    <arg name="depth_registered_processing" value="true" /> 
    <arg name="disparity_processing" value="false" /> 
    <arg name="disparity_registered_processing" value="false" /> 
    <arg name="sw_registered_processing" value="false" /> 
    <arg name="hw_registered_processing" value="true" /> 
  </include>
  <include unless="$(arg playback)" file="$(find freenect_launch)/launch/freenect.launch">
    <arg name="depth_registration" value="true" />
    <arg name="camera" value="camera2" />
    <arg name="device_id" value="A70775X05624228A" />
		<arg name="rgb_processing" value="true" /> 
    <arg name="ir_processing" value="false" /> 
    <arg name="depth_processing" value="false" /> 
    <arg name="depth_registered_processing" value="true" /> 
    <arg name="disparity_processing" value="false" /> 
    <arg name="disparity_registered_processing" value="false" /> 
    <arg name="sw_registered_processing" value="false" /> 
    <arg name="hw_registered_processing" value="true" /> 
  </include>
  
	<!-- Recording data to .bag file -->
  <node pkg="rosbag" type="record" name="rosbag_record_two_kinectv1"
	  args="-o $(arg record_prefix)
	  	/tf
		/tf_static
		/camera1/rgb/camera_info
		/camera1/rgb/image_rect_color/compressed
		/camera1/depth_registered/camera_info
		/camera1/depth_registered/image_raw
		/camera2/rgb/camera_info
		/camera2/rgb/image_rect_color/compressed
		/camera2/depth_registered/camera_info
		/camera2/depth_registered/image_raw"
	if="$(arg record)" />
		
	<!--
		/camera1/rgbd_image
		/camera1/rgbd_image/compressed
		/camera2/rgbd_image
		/camera2/rgbd_image/compressed
	-->

	<!-- Transformation and rotation between the two cameras -->
  <node pkg="tf" type="static_transform_publisher" name="base_to_camera1_tf"
      args="0.0 0.0 0.0 0.0 0.0 0.0 /base_link /camera1_link 100" if="$(arg change_tf)" >
	</node>

  <node pkg="tf" type="static_transform_publisher" name="base_to_camera2_tf"
	  args="-.0745271669450724 -.22035212607998148 -.00538525490684241 -1.091365 0.026006 -.031799  /base_link /camera2_link 100" if="$(arg change_tf)" >
	</node>

 <!--
  <node pkg="tf" type="static_transform_publisher" name="base_to_camera2_tf"
	  args="-.10418401 -.27090350 -.00597125 -1.097356 0.029378 -.035051 /base_link /camera2_link 100" if="$(arg change_tf)" >
	</node>
 -->
<!--
	<include if="$(arg playback)" file="camera1_frames.launch" />
	<include if="$(arg playback)" file="camera2_frames.launch" />
-->

   <!-- Choose visualization -->
   <arg name="rviz"       default="false" />
   <arg name="rtabmapviz" default="true" /> 
   
   <!-- ODOMETRY MAIN ARGUMENTS: 
        -"strategy"        : Strategy: 0=Frame-to-Map 1=Frame-to-Frame
        -"feature"         : Feature type: 0=SURF 1=SIFT 2=ORB 3=FAST/FREAK 4=FAST/BRIEF 5=GFTT/FREAK 6=GFTT/BRIEF 7=BRISK
        -"nn"              : Nearest neighbor strategy : 0=Linear, 1=FLANN_KDTREE, 2=FLANN_LSH, 3=BRUTEFORCE 
                             Set to 1 for float descriptor like SIFT/SURF                  
                             Set to 3 for binary descriptor like ORB/FREAK/BRIEF/BRISK  
        -"max_depth"       : Maximum features depth (m)  
        -"min_inliers"     : Minimum visual correspondences to accept a transformation (m)  
        -"inlier_distance" : RANSAC maximum inliers distance (m)  
        -"local_map"       : Local map size: number of unique features to keep track 
        -"odom_info_data"  : Fill odometry info messages with inliers/outliers data.
    -->
   <arg name="strategy"        default="0" />
   <arg name="feature"         default="6" />
   <arg name="nn"              default="3" />
   <arg name="max_depth"       default="4.0" />
   <arg name="min_inliers"     default="20" />
   <arg name="inlier_distance" default="0.02" />
   <arg name="local_map"       default="1000" />
   <arg name="odom_info_data"  default="true" />
   <arg name="wait_for_transform"  default="true" />
   
   <!-- sync rgb/depth images per camera -->

   <group ns="camera1" unless="$(arg playback)">
    <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="load rtabmap_ros/rgbd_sync camera1_nodelet_manager">
      <remap from="rgb/image"       to="rgb/image_rect_color"/>
      <remap from="depth/image"     to="depth_registered/image_raw"/>
      <remap from="rgb/camera_info" to="rgb/camera_info"/>
    </node>
   </group>
   <group ns="camera2" unless="$(arg playback)">
    <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="load rtabmap_ros/rgbd_sync camera2_nodelet_manager">
      <remap from="rgb/image"       to="rgb/image_rect_color"/>
      <remap from="depth/image"     to="depth_registered/image_raw"/>
      <remap from="rgb/camera_info" to="rgb/camera_info"/>
    </node>
   </group>

    <group ns="camera1" if="$(arg playback)">
			<node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync">
				<remap from="rgb/image"       to="rgb/image_rect_color"/>
				<remap from="depth/image"     to="depth_registered/image_raw"/>
				<remap from="rgb/camera_info" to="rgb/camera_info"/>
			</node>
   </group>
   <group ns="camera2" if="$(arg playback)">
			<node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync">
				<remap from="rgb/image"       to="rgb/image_rect_color"/>
				<remap from="depth/image"     to="depth_registered/image_raw"/>
				<remap from="rgb/camera_info" to="rgb/camera_info"/>
			</node>
   </group>


  <group ns="rtabmap">
  
    <!-- Odometry -->
    <node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen">
      <remap from="rgbd_image0"       to="/camera1/rgbd_image"/>
      <remap from="rgbd_image1"       to="/camera2/rgbd_image"/>
	  
	  	<param name="subscribe_rgbd"    	type="bool"   value="true"/>
	  	<param name="frame_id"            type="string" value="base_link"/>
			<param name="rgbd_cameras"        type="int"    value="2"/>
			<param name="wait_for_transform"  type="bool"   value="$(arg wait_for_transform)"/>
			<param name="Odom/Strategy"       type="string" value="$(arg strategy)"/> 
			<param name="Vis/EstimationType"  type="string" value="0"/> <!-- should be 0 for multi-cameras -->
			<param name="Vis/FeatureType"     type="string" value="$(arg feature)"/>  
			<param name="Vis/CorNNType"       type="string" value="$(arg nn)"/>
			<param name="Vis/MaxDepth"        type="string" value="$(arg max_depth)"/>  
			<param name="Vis/MinInliers"      type="string" value="$(arg min_inliers)"/> 
			<param name="Vis/InlierDistance"  type="string" value="$(arg inlier_distance)"/>       
      <param name="OdomF2M/MaxSize" 		type="string" value="$(arg local_map)"/> 
      <param name="Odom/FillInfoData"   type="string" value="$(arg odom_info_data)"/>   
    </node>
  
    <!-- Visual SLAM (robot side) -->
    <!-- args: "delete_db_on_start" and "udebug" -->
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen">
		<!--
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="-jjjjjjjjjjjjjjjjjjjjjjjjj-delete_db_on_start">
		-->
      <param name="subscribe_depth"  type="bool"   value="false"/>
      <param name="subscribe_rgbd"   type="bool"   value="true"/>
      <param name="rgbd_cameras"    type="int"    value="2"/>
			<param name="frame_id"         type="string" value="base_link"/>
			<param name="gen_scan"         type="bool"   value="true"/>
			<param name="wait_for_transform" type="bool"   value="$(arg wait_for_transform)"/>
			<param name="map_negative_poses_ignored" type="bool"   value="false"/>        <!-- refresh grid map even if we are not moving-->
			<param name="map_negative_scan_empty_ray_tracing" type="bool" value="false"/> <!-- don't fill empty space between the generated scans-->
	
      <remap from="rgbd_image0"       to="/camera1/rgbd_image"/>
      <remap from="rgbd_image1"       to="/camera2/rgbd_image"/>

      <param name="Grid/FromDepth"     type="string" value="false"/>
      <param name="Vis/EstimationType" type="string" value="0"/> <!-- should be 0 for multi-cameras -->
      <param name="Vis/MinInliers"     type="string" value="10"/>
      <param name="Vis/InlierDistance" type="string" value="$(arg inlier_distance)"/>
    </node>
  
    <!-- Visualisation RTAB-Map -->
    <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
      <param name="subscribe_depth"  type="bool"   value="false"/>
      <param name="subscribe_rgbd"   type="bool"   value="true"/>
      <param name="subscribe_odom_info" type="bool"   value="$(arg odom_info_data)"/>
      <param name="frame_id"            type="string" value="base_link"/>
      <param name="rgbd_cameras"       type="int"    value="2"/>
      <param name="wait_for_transform"  type="bool"   value="$(arg wait_for_transform)"/>
    
      <remap from="rgbd_image0"       to="/camera1/rgbd_image"/>
      <remap from="rgbd_image1"       to="/camera2/rgbd_image"/>
    </node>
  
  </group>
  
  <!-- Visualization RVIZ -->
  <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="-d $(find rtabmap_ros)/launch/config/rgbd.rviz"/>

	<group if="$(arg playback)">
<!--
		<node pkg="rosbag" type="play" name="rosbag_play_two_kinectv1"
					args="$(arg playback_file) -d 2 -jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj-clock">
			<remap from="/camera1/rgb/image_rect_color/compressed" to="/compressed1/rgb/image_rect_color/compressed" />
			<remap from="/camera2/rgb/image_rect_color/compressed" to="/compressed2/rgb/image_rect_color/compressed" />
			<remap from="/tf" to="/foo1" />
			<remap from="/tf_static" to="/foo2" />
		</node>
-->
		<node pkg="image_transport" type="republish" name="decompress_image_1"
					args="compressed in:=/compressed1/rgb/image_rect_color out:=/camera1/rgb/image_rect_color" />		
		<node pkg="image_transport" type="republish" name="decompress_image_2"
					args="compressed in:=/compressed2/rgb/image_rect_color out:=/camera2/rgb/image_rect_color" />
	</group>

</launch>
