<launch>

  <arg name="min_sampled_candidates"  default="2" /> <!-- RGBD-SLAM default is 4 -->
  <arg name="optimizer_skip_step"     default="30" /> <!-- RGBD-SLAM default is 1 -->
  <arg name="feature_detector_type"   default="ORB" /> <!-- RGBD-SLAM default is ORB -->
  <arg name="feature_extractor_type"  default="ORB" /> <!-- RGBD-SLAM default is ORB -->
    
  <arg name="topic_image_mono"        default="/camera/color/image_rect_color"/>
  <arg name="camera_info_topic"       default="/camera/color/camera_info"/>
  <arg name="topic_image_depth"       default="/camera/depth_registered/sw_registered/image_rect_raw"/>
  <arg name="topic_points"            default="" />


  <node pkg="rgbdslam" type="rgbdslam" name="rgbdslam" cwd="node" required="true" output="screen"> 
    <!-- Input data settings-->
    <param name="config/topic_image_mono"              value="$(arg topic_image_mono)"/>
	<param name="config/camera_info_topic"             value="$(arg camera_info_topic)"/>
    <param name="config/topic_image_depth"             value="$(arg topic_image_depth)"/>
	<param name="config/topic_points"                  value="$(arg topic_points)" />  <!--if empty, poincloud will be reconstructed from image and depth -->

    <!-- These are the default values of some important parameters -->
    <param name="config/feature_extractor_type"        value="$(arg feature_extractor_type)"/><!-- also available: SIFT, SIFTGPU, SURF, SURF128 (extended SURF), ORB. -->
    <param name="config/feature_detector_type"         value="$(arg feature_detector_type)"/><!-- also available: SIFT, SURF, GFTT (good features to track), ORB. -->
    <param name="config/detector_grid_resolution"      value="3"/><!-- detect on a 3x3 grid (to spread ORB keypoints and parallelize SIFT and SURF) -->
    <param name="config/max_keypoints"                 value="600"/><!-- Extract no more than this many keypoints -->
    <param name="config/max_matches"                   value="300"/><!-- Keep the best n matches (important for ORB to set lower than max_keypoints) -->

    <param name="config/min_sampled_candidates"        value="$(arg min_sampled_candidates)"/><!-- Frame-to-frame comparisons to random frames (big loop closures) -->
    <param name="config/predecessor_candidates"        value="4"/><!-- Frame-to-frame comparisons to sequential frames-->
    <param name="config/neighbor_candidates"           value="4"/><!-- Frame-to-frame comparisons to graph neighbor frames-->
    <param name="config/ransac_iterations"             value="100"/>
    <param name="config/cloud_creation_skip_step"      value="2"/><!-- subsample the images' pixels (in both, width and height), when creating the cloud (and therefore reduce memory consumption) -->

    
    <param name="config/cloud_display_type"            value="POINTS"/><!-- Show pointclouds as points (as opposed to TRIANGLE_STRIP) -->
    <param name="config/pose_relative_to"              value="largest_loop"/><!-- optimize only a subset of the graph: "largest_loop" = Everything from the earliest matched frame to the current one. Use "first" to optimize the full graph, "inaffected" to optimize only the frames that were matched (not those inbetween for loops) -->
    <param name="config/backend_solver"                value="pcg"/><!-- pcg is faster and good for continuous online optimization, cholmod and csparse are better for offline optimization (without good initial guess)-->
    <param name="config/optimizer_skip_step"           value="$(arg optimizer_skip_step)"/><!-- optimize only every n-th frame -->

  </node>



</launch>
