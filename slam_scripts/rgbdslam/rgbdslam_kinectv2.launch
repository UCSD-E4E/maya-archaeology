<launch>
 
  
  <arg name="record" default="true" />
  <arg name="record_prefix" default="kinectv2" />

  <arg name="playback" default="false" />
  <arg name="playback_file" default="" />


  <node pkg="rosbag" type="record" name="rosbag_record_kinectv2"
        args="-o $(arg record_prefix)
              /kinect2/bond
              /kinect2/hd/camera_info
              /kinect2/hd/image_color/compressed
              /kinect2/qhd/camera_info
              /kinect2/qhd/image_color_rect/compressed
              /kinect2/qhd/image_depth_rect
			  /tfsensors/imu1
              /tf
              /tf_static"
        if="$(arg record)"/>




  	<include unless="$(arg playback)" file="$(find kinect2_bridge)/launch/kinect2_bridge.launch">
    	<arg name="publish_tf" value="true"/>
    	<arg name="max_depth"  value="8" />
  	</include>


  <node unless="$(arg playback)"
        pkg="tinkerforge_sensors" type="tinkerforge_sensors_node" name="imu_node">
    <param name="rate" type="int" value="500"/>
	<!-- Note: This (rosparam) should point to a yaml config file with the IMU UID and set frame_id to 'imu_link' -->
	<rosparam param="sensor_conf" file="$(find tinkerforge_sensors)/launch/conf.yaml" />
  </node>


  <node pkg="tf" type="static_transform_/camera/color/image_mono/compressedDepthpublisher" name="rgb_to_imu_tf"
        args="0.0 0.0 0.0 0.0 0.0 1.5707963268 kinect2_ir_optical_frame imu_link 100" />
  <!-- Current IMU configuration is -90 deg about X -->


  <include file="rgbdslam.launch">
    <arg name="min_sampled_candidates"  value="2" />
    <arg name="optimizer_skip_step"     value="30" />
    <arg name="feature_detector_type"   value="ORB" />
    <arg name="feature_extractor_type"  value="ORB" />
    <arg name="topic_image_mono"        value="/kinect2/qhd/image_color_rect"/>
    <arg name="camera_info_topic"       value="/kinect2/qhd/camera_info"/>
    <arg name="topic_image_depth"       value="/kinect2/qhd/image_depth_rect"/>
    <arg name="topic_points"            value="" />
  </include>

	<group if="$(arg playback)">
	
		<node pkg="image_transport" type="republish" name="decompress_image"
				args="compressed in:=/compressed/qhd/image_color_rect out:=/kinect2/qhd/image_color_rect" />

  	<node pkg="rosbag" type="play" name="rosbag_play_kinectv2"
        args="$(arg playback_file) -d 2 --clock">
			<remap from="/kinect2/qhd/image_color_rect/compressed" to="/compressed/qhd/image_color_rect/compressed" />
		</node>
	</group>



</launch>
